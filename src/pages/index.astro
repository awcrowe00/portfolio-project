---

// Layout import â€” provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from '../layouts/BaseLayout.astro';

// Component Imports
import CanvasContainer from '../components/CanvasContainer.astro'



// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<BaseLayout>
	<CanvasContainer />
</BaseLayout>

<style>


	/* ====================================================== */

	.section {
		display: grid;
		gap: 2rem;
	}

	.with-background {
		position: relative;
	}

	.with-background::before {
		--hero-bg: var(--bg-image-subtle-2);

		content: '';
		position: absolute;
		pointer-events: none;
		left: 50%;
		width: 100vw;
		aspect-ratio: calc(2.25 / var(--bg-scale));
		top: 0;
		transform: translateY(-75%) translateX(-50%);
		background:
			url('/assets/backgrounds/noise.png') top center/220px repeat,
			var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
			var(--gray-999);
		background-blend-mode: overlay, normal, normal, normal;
		mix-blend-mode: var(--bg-blend-mode);
		z-index: -1;
	}

	.with-background.bg-variant::before {
		--hero-bg: var(--bg-image-subtle-1);
	}

	.section-header {
		justify-self: center;
		text-align: center;
		max-width: 50ch;
		font-size: var(--text-md);
		color: var(--gray-300);
	}

	.section-header h3 {
		font-size: var(--text-2xl);
	}

	@media (min-width: 50em) {
		.section {
			grid-template-columns: repeat(4, 1fr);
			grid-template-areas: 'header header header header' 'gallery gallery gallery gallery';
			gap: 5rem;
		}

		.section.with-cta {
			grid-template-areas: 'header header header cta' 'gallery gallery gallery gallery';
		}

		.section-header {
			grid-area: header;
			font-size: var(--text-lg);
		}

		.section-header h3 {
			font-size: var(--text-4xl);
		}

		.with-cta .section-header {
			justify-self: flex-start;
			text-align: left;
		}

		.gallery {
			grid-area: gallery;
		}

		.cta {
			grid-area: cta;
		}
	}

	/* ====================================================== */

	.mention-card {
		display: flex;
		height: 7rem;
		justify-content: center;
		align-items: center;
		text-align: center;
		border: 1px solid var(--gray-800);
		border-radius: 1.5rem;
		color: var(--gray-300);
		background: var(--gradient-subtle);
		box-shadow: var(--shadow-sm);
	}

	@media (min-width: 50em) {
		.mention-card {
			border-radius: 1.5rem;
			height: 9.5rem;
		}
	}
</style>

<script type="module">

	import * as THREE from 'three';
			import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
			import { SDFGeometryGenerator } from 'three/examples/jsm/geometries/SDFGeometryGenerator.js';
			
			let renderer, meshFromSDF, scene, camera, clock, controls;

			const settings = {
				res: 4,
				bounds: 1,
				autoRotate: true,
				wireframe: true,
				material: 'depth',
				vertexCount: '0'
			};

			// Example SDF from https://www.shadertoy.com/view/MdXSWn -->

			const shader = /* glsl */`
				float dist(vec3 p) {
					p.xyz = p.xzy;
					p *= 1.2;
					vec3 z = p;
					vec3 dz=vec3(0.0);
					float power = 40.0;
					float r, theta, phi;
					float dr = 1.0;
					
					float t0 = 1.0;
					for(int i = 0; i < 7; ++i) {
						r = length(z);
						if(r > 2.0) continue;
						theta = atan(z.y / z.x);
						#ifdef phase_shift_on
						phi = asin(z.z / r) ;
						#else
						phi = asin(z.z / r);
						#endif
						
						dr = pow(r, power - 1.0) * dr * power + 1.0;
					
						r = pow(r, power);
						theta = theta * power;
						phi = phi * power;
						
						z = r * vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi)) + p;
						
						t0 = min(t0, r);
					}
		
					return 0.5 * log(r) * r / dr;
				}
			`;

			init();
			animate();

			function init() {

				const w = window.innerWidth;
				const h = window.innerHeight;

				camera = new THREE.OrthographicCamera( w / - 5, w / 2, h / 4, h / - 2, 0.01, 1600 );
				camera.position.z = 1100;

				scene = new THREE.Scene();
			
				clock = new THREE.Clock();

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );


				controls = new OrbitControls( camera, renderer.domElement );
				controls.enableDamping = true;
				controls.enableZoom = false;
				window.addEventListener( 'resize', onWindowResize );

				compile();
			}

			function compile() {
			
				const generator = new SDFGeometryGenerator( renderer );
				const geometry = generator.generate( Math.pow( 2, settings.res + 2 ), shader, settings.bounds );
				geometry.computeVertexNormals();

				if ( meshFromSDF ) { // updates mesh

					meshFromSDF.geometry.dispose();
					meshFromSDF.geometry = geometry;
			
				} else { // inits meshFromSDF : THREE.Mesh
			
					meshFromSDF = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );
					scene.add( meshFromSDF );
			
					const scale = Math.min( window.innerWidth, window.innerHeight ) / 2 * 10.66;
					meshFromSDF.scale.set( scale, scale, scale );
			
					meshFromSDF.material.color.setHex( 0x0bb338 );
					setMaterial();
			
				}

				settings.vertexCount = geometry.attributes.position.count;

			}

			function setMaterial() {

				meshFromSDF.material.dispose();

				if ( settings.material == 'depth' ) {

					meshFromSDF.material = new THREE.MeshDepthMaterial();
					
			
				} else if ( settings.material == 'normal' ) {

					meshFromSDF.material = new THREE.MeshNormalMaterial();
			
				}

				meshFromSDF.material.wireframe = settings.wireframe;

			}

			function onWindowResize() {

				const w = window.innerWidth;
				const h = window.innerHeight;

				renderer.setSize( w, h );

				camera.left = w / - 2;
				camera.right = w / 2;
				camera.top = h / 2;
				camera.bottom = h / - 2;

				camera.updateProjectionMatrix();

			}

			function render() {

				renderer.render( scene, camera );

			}

			function animate() {

				requestAnimationFrame( animate );

				controls.update();

				if ( settings.autoRotate ) {

					meshFromSDF.rotation.y += Math.PI * 0.05 * clock.getDelta();

				}

				render();

				stats.update();

			}
</script>